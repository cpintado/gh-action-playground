name: Deployment Bot

on: [deployment_status]

jobs:
  deployment_job_1:
    if: github.event.deployment_status.state == 'success'

    name: Deployment Job 1
    runs-on: ubuntu-latest
    steps:
      - name: Create "Deployment Check 1"
        id: deployment_check_1
        uses: actions/github-script@v2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { data } = await github.checks.create({
              owner: context.payload.repository.owner.login,
              repo: context.payload.repository.name,
              name: "Deployment Check 1",
              head_sha: context.sha,
              status: "in_progress",
              started_at: new Date(),
            });

            core.setOutput('checkId', data.id)

      - uses: actions/checkout@v2

      - run: docker build -t filiph/linkcheck .

      - run: docker run filiph/linkcheck https://www.hashicorp.com
      # - name: Get changed files
      #   id: changed_files
      #   uses: futuratrepadeira/changed-files@v3.2.1
      #   with:
      #     repo-token: ${{ github.token }}
      #     pattern: '^.*\.mdx$'
      #     pr-number: 1
      # - name: Check links
      #   uses: hashicorp/gh-action-check-broken-links@v1
      #   id: links
      #   with:
      #     baseUrl: ${{ github.event.deployment_status.target_url }}
      #     files: ${{ steps.changed_files.outputs.files_created }} ${{ steps.changed_files.outputs.files_updated }}
      # - name: Report broken links
      #   if: ${{ failure() }}
      #   uses: actions/github-script@v2
      #   env:
      #     ANNOTATIONS: ${{ toJson(steps.links.outputs.annotations) }}
      #   with:
      #     github-token: ${{secrets.GITHUB_TOKEN}}
      #     script: |
      #       const annotations = JSON.parse(process.env.ANNOTATIONS)
      #       console.log('annotations: ', JSON.parse(annotations))
      #       github.checks.update({
      #         owner: context.payload.repository.owner.login,
      #         repo: context.payload.repository.name,
      #         name: "Deployment Check 1",
      #         check_run_id: ${{ steps.deployment_check_1.outputs.checkId }},
      #         conclusion: "failure",
      #         output: {
      #           title: "Found broken links!",
      #           summary: "Fix broken links before merging",
      #           annotations: JSON.parse(annotations),
      #         }
      #       })
      # - name: Pass link check
      #   if: ${{ success() }}
      #   uses: actions/github-script@v2
      #   with:
      #     github-token: ${{secrets.GITHUB_TOKEN}}
      #     script: |
      #       github.checks.update({
      #         owner: context.payload.repository.owner.login,
      #         repo: context.payload.repository.name,
      #         name: "Deployment Check 1",
      #         check_run_id: ${{ steps.deployment_check_1.outputs.checkId }},
      #         conclusion: "success",
      #       })
