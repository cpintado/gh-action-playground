name: Bot 1

on: [pull_request]

jobs:
  job_1:
    name: Job 1
    runs-on: ubuntu-latest
    steps:
      - name: Create "Check 1"
        id: check_1
        uses: actions/github-script@v2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            // Create check
            await github.checks.create({
              owner: context.payload.repository.owner.login,
              repo: context.payload.repository.name,
              name: "Check 1",
              head_sha: context.payload.pull_request.head.sha,
              status: "in_progress",
              started_at: new Date(),
            });

            const checkSuites = await github.checks.listForRef({
              owner: context.payload.repository.owner.login,
              repo: context.payload.repository.name,
              ref: context.payload.pull_request.head.sha,
              check_name: "Job 1"
            })

            const checkSuiteId = checkSuites.data.check_runs[0].check_suite.id

            const checkRuns = await github.checks.listForSuite({
              owner: context.payload.repository.owner.login,
              repo: context.payload.repository.name,
              check_suite_id: checkSuiteId
            })

            console.log('checkRuns', checkRuns.data)

            // core.setOutput('checkId', data.check_runs[0].check_suite.id)
      # - name: Update "Check 1" (Success)
      #   uses: actions/github-script@v2
      #   with:
      #     github-token: ${{secrets.GITHUB_TOKEN}}
      #     script: |
      #       github.checks.update({
      #         owner: context.payload.repository.owner.login,
      #         repo: context.payload.repository.name,
      #         name: "Check 1",
      #         check_run_id: ${{ steps.check_1.outputs.checkId }},
      #         conclusion: "success",
      #       })
